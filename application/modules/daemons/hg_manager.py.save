from apscheduler.schedulers.background import BackgroundScheduler
from application import app,conn_string,db
from application.models.models import TblMetaTaskStatus,TblAgent,TblTask
from application.common.kafka_producer import kafkaproducer

def hgmanager():
   try:

# Fetching data from meta taskstatus table

      metatablestatus=db.session.query(TblMetaTaskStatus.var_task_status,TblMetaTaskStatus.srl_id).all()
      table_status_values = dict(metatablestatus)
      task_status_value = table_status_values['CREATED']
      update_task_status_value = table_status_values['ASSIGNED']
      completed_task_status_value = table_status_values['COMPLETED']
      agent_verification_result=db.session.query(TblAgent.bool_registered,TblAgent.uid_agent_id)

# Geting agents from database

      for agent_registration in agent_verification_result:
         agent_tasks_data = []
         if agent_registration[0]==True:

# Listing tasks
            created_tasks=db.session.query(TblTask.uid_task_id,TblTask.char_task_type_id,TblTask.txt_dependent_task_id,TblTask.txt_agent_worker_version,TblTask.txt_agent_worker_version_path,TblTask.txt_payload_id,TblTask.int_task_status).filter(TblTask.uid_agent_id==agent_registration[1],TblTask.int_task_status==task_status_value).all()
	    print created_tasks,"taskss"
            agent_customer_cluster_details=db.session.query(TblAgent.uid_customer_id,TblAgent.uid_cluster_id).filter(TblAgent.uid_agent_id==agent_registration[1])
		
            for each_tuple in created_tasks:
	       print each_tuple[2],"all"
               dependency_tasks= each_tuple[2]
               if dependency_tasks==None:
		  print "no dependencies"
                  taskdata = {}
                  task_id=each_tuple[0]
                  taskdata['cluster_id']=agent_customer_cluster_details[0][1]
                  taskdata['customer_id']=agent_customer_cluster_details[0][0]
                  taskdata['agent_worker_path'] = each_tuple[4]
                  taskdata['agent_worker_version'] = each_tuple[3]
                  taskdata['task_type_id'] = each_tuple[1]
                  taskdata['task_id']=task_id
                  taskdata['payload_id']=each_tuple[5]
                  taskdata['task_status']=each_tuple[6]
		  print taskdata
                  agent_tasks_data.append(taskdata)
                  print agent_tasks_data,'no dependencies'
		  update_taskstatus_statement=db.session.query(TblTask).filter(TblTask.uid_task_id==task_id)
                  update_taskstatus_statement.update({"int_task_status":update_task_status_value})
                  db.session.commit()
               else:
		  print 'not none'
		  list_of_dependency_tasks=dependency_tasks.split(',')
                  task_id=each_tuple[0]
		  print task_id
                  taskdata = {}
                  taskdata['cluster_id']=agent_customer_cluster_details[0][1]
                  taskdata['customer_id']=agent_customer_cluster_details[0][0]
                  taskdata['task_id']=task_id
                  taskdata['agent_worker_path']=each_tuple[4]
                  taskdata['agent_worker_version']=each_tuple[3]
                  taskdata['task_type_id']=each_tuple[1]
                  taskdata['payload_id']=each_tuple[5]
                  taskdata['task_status'] = each_tuple[6]
                  completedtasks=[]

                  for each_id in list_of_dependency_tasks:
		     print 'i am in next for'
                     dependency_task_id=each_id.replace('"','')
                     dependency_task_status=db.session.query(TblTask.int_task_status).filter(TblTask.uid_task_id==dependency_task_id)
                     dependency_task_status_value=dependency_task_status[0]
		     print dependency_task_status_value[0],'my value'
                     if dependency_task_status_value[0]==completed_task_status_value:
                        completedtasks.append(dependency_task_status)
			print 'completed tasks',completedtasks
                  if len(completedtasks)==len(list_of_dependency_tasks):
                     agent_tasks_data.append(taskdata)
		  
		     print agent_tasks_data,'dependency','last if'
                     update_assigned_statement=db.session.query(TblTask).filter(TblTask.uid_task_id==task_id)
                     update_assigned_statement.update({"int_task_status":update_task_status_value})
                     db.session.commit()
	    print agent_tasks_data
            if agent_tasks_data == []:
               print("nodata")
            else:
            	print agent_tasks_data,"agent data"
		kafkaproducer(message=agent_tasks_data)
         else:
            return jsonify(message="agent is not registered")


   except Exception as e:
      return e.message

def hgmanagerscheduler():
	scheduler = BackgroundScheduler()
	scheduler.add_job(hgmanager,'cron',minute='*/1')
	scheduler.start()
